var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });

    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    /*
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
      
    });
    */
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

/*
  A bubble is a simple header with content for now.
*/
var Bubble = React.createClass({  
  render: function() {
    return (
      <div className="bubble">
        <h2>{this.props.title}</h2>
        <p>
          {this.props.children}
        </p>
      </div>
    );
  }
});

/*
  Displays a list of bubbles.
 */
var BubbleDisplayList = React.createClass({
  
  getMessage: function() {
    // No bubbles exist
    if (this.props.data.length == 0) {
      return (
        <p>
          There are no bubbles right now.
        </p>
      );
    }
    
    // Bubbles exist
    return (
      <p>
        Here are the current bubbles:
      </p>
      );
  },
  
  getBubbles: function() {
    return this.props.data.map(function(bubble) {
        return (
          <Bubble title={bubble.title} key={bubble.id}>
            {bubble.text}
          </Bubble>
        );
      });
  },
  
  render: function() {
    
    var message = this.getMessage();
    var bubbles = this.getBubbles();
    
    return (
      <div className="bubbleDisplayList">
        <h1>Bubbles</h1>
        {message}
        {bubbles}
      </div>
    );
  }
});

/*
  Just a link with sugar.
*/
var TutorialLink = React.createClass({
  render: function() {
    return (
      <div className="tutorialLink">
        <p>
          <strong>Get started: </strong>
          <a href={this.props.href}>
            {this.props.children}
          </a>
        </p>
      </div>
    );
  }
});

/*
  This is the root of the page, where all base content lies.
*/
var PageRoot = React.createClass({
  getInitialState: function() {
    return {data: [ {"id":0, "title":"Bubble 1", "text":"This is bubble content."},
                  {"id":1, "title":"Bubble 2", "text":"This is also bubble content."}]};
  },
  
  render: function() {
    return (
      <div className="pageRoot">
        <h1>Bubbles</h1>
        <p>
          This is a proof-of-concept for a collective intelligence platform.
          It lets you add and remove users and "follows" relationships between them.
          It also lets you create bubbles and relate them to other bubbles.
        </p>
        
        <TutorialLink href="./users">View all users</TutorialLink>
        
        <TutorialLink href="./bubbles">View all bubbles</TutorialLink>
        
        <BubbleDisplayList data={this.state.data}></BubbleDisplayList>
        
        <CommentBox url="./scripts/api/comments.json" pollInterval={2000}/>
      </div>
    );
  }
})

ReactDOM.render(
  <PageRoot></PageRoot>,
  document.getElementById('content')
);